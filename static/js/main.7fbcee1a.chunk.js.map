{"version":3,"sources":["helpers.ts","componets/Note.tsx","componets/Octave.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["notes","note","color","Note","clickHandler","className","value","onClick","Octave","map","element","App","e","console","log","currentTarget","Audio","play","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAIaA,EAAoB,CAC/B,CACEC,KAAM,IACNC,MAAO,SAET,CACED,KAAM,SACNC,MAAO,SAET,CACED,KAAM,IACNC,MAAO,SAET,CACED,KAAM,SACNC,MAAO,SAET,CACED,KAAM,IACNC,MAAO,SAET,CACED,KAAM,IACNC,MAAO,SAET,CACED,KAAM,SACNC,MAAO,SAET,CACED,KAAM,IACNC,MAAO,SAET,CACED,KAAM,SACNC,MAAO,SAET,CACED,KAAM,IACNC,MAAO,SAET,CACED,KAAM,SACNC,MAAO,SAET,CACED,KAAM,IACNC,MAAO,U,cCvCIC,EAHe,SAAC,GAAD,IAAED,EAAF,EAAEA,MAAOD,EAAT,EAASA,KAAMG,EAAf,EAAeA,aAAf,OAC5B,wBAAQC,UAAqB,UAAVH,EAAoB,aAAe,YAAaI,MAAOL,EAAMM,QAASH,KCgB5EI,G,MAhBiB,SAAC,GAAD,IAAER,EAAF,EAAEA,MAAOI,EAAT,EAASA,aAAT,OAC9B,qBAAKC,UAAU,UAAf,SACE,qBAAKA,UAAU,SAAf,SACGL,EAAMS,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAEER,MAAOQ,EAAQR,MACfD,KAAMS,EAAQT,KACdG,aAAcA,GAHTM,EAAQT,e,MCURU,MApBf,WAME,OACE,sBAAKN,UAAU,MAAf,UACE,wBAAQA,UAAU,SAAlB,SACA,mBAAGA,UAAU,QAAb,6BAEA,sBAAKA,UAAU,gBAAf,UACE,wBAAQA,UAAU,gBAAlB,mBACA,wBAAQA,UAAU,kBAAlB,wBAEF,cAAC,EAAD,CAAQL,MAAOA,EAAOI,aAdL,SAACQ,GACpBC,QAAQC,IAAIF,EAAEG,cAAcT,OACd,IAAIU,MAAJ,sBAAyBJ,EAAEG,cAAcT,MAAzC,SACRW,cCKKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7fbcee1a.chunk.js","sourcesContent":["export type NoteType = {\n  [key: string]: string;\n};\n\nexport const notes: NoteType[] = [\n  {\n    note: 'C',\n    color: 'white'\n  },\n  {\n    note: 'CSharp',\n    color: 'black'\n  },\n  {\n    note: 'D',\n    color: 'white'\n  },\n  {\n    note: 'DSharp',\n    color: 'black'\n  },\n  {\n    note: 'E',\n    color: 'white'\n  },\n  {\n    note: 'F',\n    color: 'white'\n  },\n  {\n    note: 'FSharp',\n    color: 'black'\n  },\n  {\n    note: 'G',\n    color: 'white'\n  },\n  {\n    note: 'GSharp',\n    color: 'black'\n  },\n  {\n    note: 'A',\n    color: 'white'\n  },\n  {\n    note: 'ASharp',\n    color: 'black'\n  },\n  {\n    note: 'B',\n    color: 'white'\n  }\n];","import React from \"react\";\nimport './Note.css'\n\ntype Props = {\n  color: string,\n  note: string,\n  clickHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst Note: React.FC<Props> = ({color, note, clickHandler}) =>\n  <button className={color === 'white' ? 'btn-white ' : 'btn-black'} value={note} onClick={clickHandler}/>;\n\nexport default Note;","import React from 'react';\nimport { NoteType } from '../helpers'\nimport Note from './Note'\nimport './Octave.css'\n\ntype Props = {\n  notes: NoteType[],\n  clickHandler: (e: React.MouseEvent<HTMLButtonElement>) => void,\n}\n\nconst Octave: React.FC<Props> = ({notes, clickHandler}) => (\n  <div className='wrapper'>\n    <div className=\"octave\">\n      {notes.map((element: NoteType) => (\n        <Note\n          key={element.note}\n          color={element.color}\n          note={element.note}\n          clickHandler={clickHandler}\n        />\n      ))}\n    </div>\n  </div>\n)\n\n\nexport default Octave;","import React from 'react';\nimport { notes } from './helpers'\nimport Octave from './componets/Octave'\nimport './App.css'\n\nfunction App() {\n  const handlerClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    console.log(e.currentTarget.value);\n    const audio = new Audio(`audio/piano_${e.currentTarget.value}.mp3`);\n    audio.play();\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n      <p className=\"title\">Virtual Piano</p>\n      </header>\n      <div className='btn-container'>\n        <button className='btn btn-notes'>Notes</button>\n        <button className='btn btn-letters'>Letters</button>\n      </div>\n      <Octave notes={notes} clickHandler={handlerClick}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}